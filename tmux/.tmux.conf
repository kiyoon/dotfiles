# Setting the prefix from `C-b` to `C-a`.
# By remapping the `CapsLock` key to `Ctrl`,
# you can make triggering commands more comfortable!
set -g prefix C-a

# Free the original `Ctrl-b` prefix keybinding.
unbind C-b

# Ensure that we can send `Ctrl-a` to other apps.
bind C-a send-prefix

# split panes using \ and -
bind \\ split-window -h
bind - split-window -v
# split panes at current directory (| and _)
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Moving between panes.
# Use tmux.nvim plugin if possible. (Ctrl+ h,j,k,l)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Enable mouse mode (tmux 2.1 and above)
set -g mouse on
# Mouse wheel (Linux only)
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down

# don't rename windows automatically
#set-option -g allow-rename off

# passthrough OSC52 clipboard copy
set -g allow-passthrough on
set -g set-clipboard on

# OSC 133 navigate per prompt
# needs tmux 3.4
# needs to print the osc 133 sequence before each prompt
# in bash, use PROMPT_COMMAND
# in zsh, use precmd()
# in this dotfiles, we have `wezterm.zsh` to set this up following
# https://wezterm.org/shell-integration.html
bind-key -T copy-mode-vi [ send-keys -X previous-prompt
bind-key -T copy-mode-vi ] send-keys -X next-prompt

# Pass C-1, C-2, C-3, C-4 to the terminal. Make sure the terminal supports it.
# set -s extended-keys on
# set -as terminal-features 'xterm*:extkeys'

# Pane resizing.
# bind -r H resize-pane -L 5
# bind -r J resize-pane -D 5
# bind -r K resize-pane -U 5
# bind -r L resize-pane -R 5

# Move current pane to next/prev window
# Get the next window id by calling the script
bind -r N run-shell "tmux join-pane -h -t $(~/.config/dotfiles/tmux/scripts/get_next_window_uid.sh)"
bind -r P run-shell "tmux join-pane -h -t $(~/.config/dotfiles/tmux/scripts/get_prev_window_uid.sh)"

# reorder windows.
bind-key -n C-S-Left swap-window -d -t -1
bind-key -n C-S-Right swap-window -d -t +1
bind-key -n MouseDrag1Status swap-window -d -t=
# the above doesn't work in mac..
bind -r H swap-window -d -t -1
bind -r L swap-window -d -t +1

# 256 colour
# set -g default-terminal "tmux-256color"
# set -ag terminal-overrides ",xterm-256color:RGB"

# This works with wezterm.
set -g default-terminal "${TERM}"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# Home End key doesn't work?
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"
# set-window-option -g xterm-keys on

# Vimlike copy mode.
# WARN: tmux-yank plugin may override this.

bind-key Escape copy-mode
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
# unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe "xclip -selection c"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"

# Ctrl+a + q to show pane numbers, for long time.
set -g display-panes-time 4000

# Setting the delay between prefix and command.
set -sg escape-time 1

# Set the base index for windows to 1 instead of 0.
set -g base-index 1

# Set the base index for panes to 1 instead of 0.
setw -g pane-base-index 1

# Cache 50000 lines for scroll back
set-option -g history-limit 50000

# Enable vi keys.
# setw -g mode-keys vi

# toggle between two panes / windows
bind-key t last-window
bind-key T last-pane

# loud or quiet?
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none


# set default directory for new windows in this session to current directory:
#bind M-c attach-session -c "#{pane_current_path}"

# open a new window in the current directory
bind C new-window -c "#{pane_current_path}"


# Kill window is by default mapped to prefix + &
# Kill pane is by default mapped to prefix + x
# Kill session
bind X confirm-before kill-session


# tmux.nvim seamless navigation
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# tmux.nvim seamless resizing
bind -n 'C-M-y' if-shell "$is_vim" 'send-keys C-M-y' 'resize-pane -L 4'
bind -n 'C-M-u' if-shell "$is_vim" 'send-keys C-M-u' 'resize-pane -D 2'
bind -n 'C-M-i' if-shell "$is_vim" 'send-keys C-M-i' 'resize-pane -U 2'
bind -n 'C-M-o' if-shell "$is_vim" 'send-keys C-M-o' 'resize-pane -R 4'

bind-key -T copy-mode-vi C-M-y resize-pane -L 4
bind-key -T copy-mode-vi C-M-u resize-pane -D 2
bind-key -T copy-mode-vi C-M-i resize-pane -U 2
bind-key -T copy-mode-vi C-M-o resize-pane -R 4

bind -n 'C-F3' if-shell "$is_vim" 'send-keys C-F3' 'resize-pane -L 4'
bind -n 'C-F2' if-shell "$is_vim" 'send-keys C-F2' 'resize-pane -L 4'
bind -n 'C-F6' if-shell "$is_vim" 'send-keys C-F6' 'resize-pane -R 4'
bind -n 'C-F7' if-shell "$is_vim" 'send-keys C-F7' 'resize-pane -R 4'
bind -n 'S-F3' if-shell "$is_vim" 'send-keys S-F3' 'resize-pane -U 2'
bind -n 'S-F2' if-shell "$is_vim" 'send-keys S-F2' 'resize-pane -U 2'
bind -n 'S-F6' if-shell "$is_vim" 'send-keys S-F6' 'resize-pane -D 2'


bind -n 'M-F2' swap-window -d -t -1  # Alt + knob counter-clockwise
bind -n 'M-F3' swap-window -d -t -1  # Alt + knob counter-clockwise
bind -n 'M-F5' swap-window -d -t +1  # Alt + knob clockwise
bind -n 'M-F6' swap-window -d -t +1  # Alt + knob clockwise
bind -n F8 previous-window  # fn + knob counter-clockwise
bind -n F10 next-window  # fn + knob clockwise

is_nvim_or_fzf="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(nvim|fzf)$'"
bind -n 'F2' if-shell "$is_nvim_or_fzf" 'send-keys F2' 'previous-window'
bind -n 'F3' if-shell "$is_nvim_or_fzf" 'send-keys F3' 'previous-window'
bind -n 'F5' if-shell "$is_nvim_or_fzf" 'send-keys F5' 'next-window'
bind -n 'F6' if-shell "$is_nvim_or_fzf" 'send-keys F6' 'next-window'

# https://www.ditig.com/256-colors-cheat-sheet
# white, black etc. are not accurate (they follow system colour).
# Use grey100, grey0 instead.

#  modes
setw -g clock-mode-colour colour5
# when text selected with mouse
#setw -g mode-style 'fg=colour1 bg=colour18 bold'

# panes
set -g pane-border-style 'fg=grey0'
set -g pane-active-border-style 'fg=violet'

# statusbar
set -g status-position bottom
set -g status-justify left
set -g status-style 'bg=grey35 fg=grey100'
set -g status-left ''
set -g status-right ''
#set -g status-right '#[fg=colour233,bg=colour19] %d/%m #[fg=colour233,bg=colour8] %H:%M:%S #[fg=colour10,bg=colour11] Pane '
set -g status-right '#{prefix_highlight}'
set -g status-right-length 50
set -g status-left-length 20

#setw -g window-status-current-style 'fg=grey100'
setw -g window-status-current-format ' #[fg=colour9][#I#[fg=grey100]:#W#F#[fg=colour9]] '

setw -g window-status-style 'fg=grey70'
setw -g window-status-format ' #I:#W '

setw -g window-status-bell-style 'fg=colour255 bg=colour1 bold'

# messages
set -g message-style 'fg=grey100 bg=grey0'


# pane status
set -g pane-border-status top 
#set -g pane-border-format '#[fg=grey0,bg=grey50] .#P (#D) pid=#{pane_pid} #{pane_current_command} '

# dracula theme
#white='#f8f8f2'
#gray='#44475a'
#dark_purple='#6272a4'

set -g pane-border-format "#[fg=#6272a4,bg=default]#[fg=#f8f8f2,bg=#6272a4] .#P (#D) pid=#{pane_pid} #{pane_current_command} #[fg=#6272a4,bg=default]"
# simple and dim version
#set -g pane-border-format " .#P (#D) pid=#{pane_pid} #{pane_current_command} "

# For tmux-yank.
# Set this only if you use bash vi mode.
#set -g @shell_mode 'vi'
set -g @yank_action 'copy-pipe'  # do not exit copy mode after yank
set -g @yank_with_mouse off      # we define our own mouse yank above

# For treemux
set -g @treemux-tree-nvim-init-file '~/.config/nvim/treemux_init.lua'
set -g @treemux-tree-position 'left'
set -g @treemux-nvim-command 'NVIM_APPNAME=nvim-treemux nvim'
set -g @treemux-python-command '/usr/bin/python3'  # python with pynvim installed
set -g @treemux-refresh-interval 0.1
set -g @treemux-refresh-interval-inactive-pane 2
set -g @treemux-refresh-interval-inactive-window 5
set -g @treemux-enable-debug-pane 0

# extrakto
set -g @extrakto_key 'e'

# dracula theme
# if-shell "uname | grep -q Darwin" "set -g @dracula-plugins 'battery cpu-usage ram-usage'" "set -g @dracula-plugins 'battery cpu-usage gpu-usage ram-usage'"
set -g @dracula-plugins "battery cpu-usage gpu-usage ram-usage"
set -g @dracula-cpu-usage-colors "pink dark_gray"
set -g @dracula-gpu-usage-colors "orange dark_gray"
set -g @dracula-battery-colors "light_purple dark_gray"
set -g @dracula-weather-colors "dark_purple white"
# set -g @dracula-git-colors "red dark_gray"

# Add shape to the status bar
set -g @dracula-show-powerline true
# for left
#set -g @dracula-show-left-sep 
# for right symbol (can set any symbol you like as seperator)
#set -g @dracula-show-right-sep 

set -g @dracula-show-left-icon "🐰"
set -g @dracula-cpu-usage-label "😉"
set -g @dracula-cpu-usage-label-25 "😵"
set -g @dracula-cpu-usage-label-50 "🤕"
set -g @dracula-cpu-usage-label-75 "🤯"
set -g @dracula-gpu-usage-label "🎥"
set -g @dracula-ram-usage-label " "
set -g @dracula-battery-dc-label-0 "🌱"
set -g @dracula-battery-dc-label-35 "🌿"
set -g @dracula-battery-dc-label-70 "🥕"
set -g @dracula-battery-ac-label-0 "💦 🌱"
set -g @dracula-battery-ac-label-35 "💦 🌿"
set -g @dracula-battery-ac-label-70 "💦 🥕"
set -g @dracula-battery-ac-label "🏡"

set -g @dracula-show-fahrenheit false
set -g @dracula-fixed-location "Seoul"
set -g @dracula-show-location false

# Programs that will show the dir name too.
set -g @tmux_window_dir_programs "['nvim', 'vim', 'vi', 'git']"
# Programs that will be skipped/ignored when looking for active program.
# set -g @tmux_window_name_ignored_programs "['sqlite3']" # Default is []
set -g @tmux_window_name_max_name_len "20"
set -g @tmux_window_name_show_program_args "True"
set -g @tmux_window_name_use_tilde "True"
# NOTE: how to see tmux options: tmux show -g -v @tmux_window_name_substitute_sets
set -g @tmux_window_name_substitute_sets "[('.+ipython([32])', r'ipython\\g<1>'), ('^(/usr)?/bin/(.+)', r'\\g<2>'), ('(bash) (.+)/(.+[ $])(.+)', r'\\g<3>\\g<4>'), ('^/opt/homebrew/bin/(.+)', r'\\g<1>'), ('^nvim', 'vi')]"
	# 0: from example
	# 1: removing `/usr/bin` and `/bin` prefixes of files
	# 2: removing `bash /long/path/for/bashscript`


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'kiyoon/tmux-yank'
set -g @plugin 'kiyoon/treemux'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'kiyoon/tmux-dracula'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'ofirgall/tmux-window-name'


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
